{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let rebirthAddress = base58'3PCC6fVHNa6289DTDmcUo3RuLaFmteZZsmQ'
let incubatorAddress = base58'3PEktVux2RhchSN63DsDo4b4mz4QqzKSeDv'
let backendPubKey = base58'BmKAXRQy7jZm44fa1YxNQDTcAwNSb74EpQwP5CT7UHdV'
let STARTTIMESTAMP = 1_632_474_000_000
let LAPLENGTH = 21_600_000
let EGGASSETID = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
let DUCKLINGPRICE = 8_0_000_000
let percentGrowthPrecision = 1_000_000_000_000_000_0
let existingDuckPrecision = 1_000_000_000_000_00
let KGlobalIssuedTimestamp = "global_issued_timestamp"
let MSINDAY = 86_400_000

func keyTotalFeed(ducklingId: String) = {
  "duckling_" + ducklingId + "_feed"
}

func keyDucklingFedLap(ducklingId: String) = {
  "duckling_" + ducklingId + "_fedLap"
}

func keyDucklingFedTimestamp(ducklingId: String) = {
  "duckling_" + ducklingId + "_fedTs"
}
func keyDucklingFedLapTimestamp(ducklingId: String, lap: Int) = {
  "duckling_" + ducklingId + "_lap_" + lap.toString() + "_fedTs"
}

func keyAddressFedTimestamp(address: String, lap: Int, timestamp: Int) = {
  "address_" + address + "_lap_" + lap.toString() + "_fedTs_" + timestamp.toString()
}

func keyAddressNonce(address: String) = {
  "address_" + address + "_nonce"
}

func keyDucklingFedLastTimestamp(ducklingId: String) = {
  "duckling_" + ducklingId + "_fedLastTs"
}

func keyDucklingLevel(ducklingId: String) = {
  "duckling_" + ducklingId + "_level"
}

func keyFeedForLap(address: String, lap: Int) = {
  "address_" + address + "_lap_" + lap.toString() + "_feed"
}

func keyDucklingGrown(ducklingId: String) = {
  "duckling_" + ducklingId + "_grown"
}

func keyStartHatchingId(ducklingId: String) = {
  "duckling_" + ducklingId + "_grown"
}


func tryGetInteger(key: String) = {
    let val = match getInteger(this, key) {
        case b:Int => b
        case _ => 0
    }
    val
}

func getBool(key: String) = {
  match getBoolean(this, key) {
      case b:Boolean => b
      case _ => false
  }
}

func getCurrentLevelBigInt(ducklingId: String) = {
  let kDuckLevel = keyDucklingLevel(ducklingId)
  match (getString(kDuckLevel)){
    case s: String => s.parseBigIntValue()
    case _ => {
      match getBoolean("duckling_" + ducklingId + "_issuedByFeedCall") {
        case b:Boolean => 0.toBigInt()
        case _ => (20 * existingDuckPrecision).toBigInt() # duckling from rebirth
      }
    }
  }
}

func getCurrentLap() = {
  ((lastBlock.timestamp - STARTTIMESTAMP) / LAPLENGTH) + 1
}

func getLastFedTimestamp(ducklingId: String) = {
  let lastFedTimestamp = tryGetInteger(keyDucklingFedLastTimestamp(ducklingId))
  if lastFedTimestamp > 0 then lastFedTimestamp else lastBlock.timestamp
}

# ducklingGrowthLevel counted with precision BigInt
func calculateNewDucklingLevel(ducklingId: String, paymentAmount: Int) = {

  let currentTs = lastBlock.timestamp
  let lastFedTimestampChecked = getLastFedTimestamp(ducklingId)
  let fedDiff = currentTs - lastFedTimestampChecked
  let penalty =  if fedDiff == 0 || fedDiff <= (MSINDAY * 2) then 0.toBigInt() else (fedDiff / MSINDAY).toBigInt() * (existingDuckPrecision / 10).toBigInt()

  let growth = fraction(paymentAmount.toBigInt(), percentGrowthPrecision.toBigInt(), DUCKLINGPRICE.toBigInt())
  # throw("currentLevel: " + getCurrentLevelBigInt(ducklingId).toString() + " penalty: " + penalty.toString() + "growth: " + growth.toString())
  #if true == true then throw("Current: " + getCurrentLevelBigInt(ducklingId).toString() + " Pen: " + penalty.toString() + ", growth: " + growth.toString() + ", currentlap: " + currentlap.toString() + " lastFedLapNumber: " + lastFedLapNumber.toString()) else {
  #}
  let currentLevel = getCurrentLevelBigInt(ducklingId)
  let newLevel = ((currentLevel - penalty) + growth)
  let result = if (newLevel < 0.toBigInt()) then growth.toString() else newLevel.toString()
  (result, ["currentLevel=" + currentLevel.toString(), "newLevel=" + newLevel.toString(), "growth=" + growth.toString(), "penalty=" + penalty.toString(), "lastFedTs=" + lastFedTimestampChecked.toString(), "fedDiff=" + fedDiff.toString()])
}

func getBackendProof(maxFeedAmount: Int, userNonce: Int, address: String) = {
  makeString([maxFeedAmount.toString(), userNonce.toString(), address], ";")
}

@Callable(i)
func issueFreeDuckling(address: String, txIdStr: String) = {
  let asset = Issue("BABY-11111111-GZ", "", 1, 0, false, unit, height)
    let assetId = asset.calculateAssetId()
    ([
      StringEntry(address + "_" + txIdStr + "_di", assetId.toBase58String()),
      IntegerEntry("stats_amount", tryGetInteger("stats_amount") + 1),
      BooleanEntry("duckling_" + assetId.toBase58String() + "_issuedByFeedCall", i.caller == this),
      asset,
      ScriptTransfer(addressFromString(address).value(), 1, assetId)
    ], assetId.toBase58String())
}

# backendProof should be maxFeedAmount;userNonce;address
# user nonce should be an incremented value
@Callable(i)
func feedDuckling(ducklingId: String, backendSignature: String, maxFeedAmount: Int, userNonce: Int) = {
  let addressString = i.caller.toString()
  let backendProof = getBackendProof(maxFeedAmount, userNonce, addressString)
  let kAddressNonce = keyAddressNonce(addressString)
  let currentNonce = tryGetInteger(kAddressNonce)

  let realDucklingId = if (!sigVerify_8Kb(backendProof.toBytes(), backendSignature.fromBase58String(), backendPubKey)) then throw("Invalid proof from backend") else 
    if (i.payments.size() != 1 || i.payments[0].value().assetId != EGGASSETID) then throw("Bad payment attached (asset[s] or amount)") else 
    if (getBool(keyDucklingGrown(ducklingId))) then throw("Duckling is already grown") else 
    if (userNonce != currentNonce + 1) then throw("User Nonce should be " + currentNonce.toString() + " + 1, while received " + userNonce.toString()) else {
      if (ducklingId == "") then {
        strict ducklingAssetId = invoke(this, "issueFreeDuckling", [i.originCaller.toString(), i.transactionId.toBase58String()], [])
        let id = match ducklingAssetId {
          case v: String => v
          case _ => throw("Can't generate NFT")
        }
        # new duckling will always have 1 as level
        id
      } else {
        let ducklingIdCheck = assetInfo(ducklingId.fromBase58String()).value()
        if (assetBalance(i.caller, ducklingIdCheck.id) != 1) then throw("You're not the owner of the duckling") else
        if (ducklingIdCheck.issuer != this) then throw("Cant find duckling with such id") 
        else {
          let ducklingIdString = ducklingIdCheck.id.toBase58String()
          ducklingIdString
        }
      }
  }

  let kDucklingLastFedTs = keyDucklingFedLastTimestamp(ducklingId)
  let lastFedTs = getLastFedTimestamp(realDucklingId)
  let currentPayment = i.payments[0].value().amount
  let kNewLevel = keyDucklingLevel(realDucklingId)
  let kTotalFeed = keyTotalFeed(realDucklingId)
  let totalFeed = tryGetInteger(kTotalFeed)
  let kFeedTxStats = "duckling_" + realDucklingId + "_stat_" + lastBlock.timestamp.toString()
  let kAddressFedTimestamp = keyAddressFedTimestamp(addressString, getCurrentLap(), lastBlock.timestamp)
  let kDucklingFedLapTimestamp = keyDucklingFedLapTimestamp(realDucklingId, getCurrentLap())
  let kDucklingFedLap = keyDucklingFedLap(realDucklingId)

  if (maxFeedAmount < currentPayment) then throw("Cannot feed duckling for such amount, max feed amount is: " + maxFeedAmount.toString()) else {
    let calculateResults = calculateNewDucklingLevel(realDucklingId, currentPayment)
    [
      IntegerEntry(kAddressNonce, currentNonce + 1),
      IntegerEntry(kDucklingLastFedTs, lastBlock.timestamp),
      IntegerEntry(kTotalFeed, totalFeed + currentPayment),
      IntegerEntry(kFeedTxStats, currentPayment),
      IntegerEntry(kAddressFedTimestamp, currentPayment),
      IntegerEntry(kDucklingFedLapTimestamp, currentPayment),
      IntegerEntry(kDucklingFedLap, getCurrentLap()),
      StringEntry(kNewLevel, calculateResults._1),
      StringEntry(kFeedTxStats + "_debug", calculateResults._2.makeString(";"))
    ]
  }
}

@Callable(i)
func fixLevels(ducklingIds: String) = {
  if (i.callerPublicKey != base58'GDxBbsDRmeY39quNrDsTXKJzFWbQVtjxHseF4ikxZ7n9') then throw("") else {
    let ducklingIdsList = ducklingIds.split(",").value()
    func handleId(acc: List[StringEntry], id: String) = {
      let kTotalFeed = keyTotalFeed(id)
      let totalFeed = tryGetInteger(kTotalFeed)
      let kNewLevel = keyDucklingLevel(id)
      let startingLevel = match getBoolean("duckling_" + id + "_issuedByFeedCall"){
        case b: Boolean => 0.toBigInt()
        case _ => (20 * existingDuckPrecision).toBigInt()
      }

      let growth = fraction(totalFeed.toBigInt(), percentGrowthPrecision.toBigInt(), DUCKLINGPRICE.toBigInt())
      acc ++ [StringEntry(kNewLevel, (startingLevel + growth).toString())]
    }

    FOLD<20>(ducklingIdsList, [], handleId)
  }
}

@Callable(i)
func turnDucklingIntoDuck() = {
  let address = i.caller.toString()
  let txId = i.transactionId.toBase58String()
  let lastIssuedDucklingTs = tryGetInteger(KGlobalIssuedTimestamp)
  let fiveMinInMs = 5 * 60 * 1000
  if (lastIssuedDucklingTs > 0 && ((lastBlock.timestamp - lastIssuedDucklingTs) < fiveMinInMs)) then throw("Can issue ducklings only once per 5 minutes, please wait for " + (fiveMinInMs - (lastBlock.timestamp - lastIssuedDucklingTs)).toString()) else 
  if (i.payments.size() != 1) then throw("Bad payment attached (asset[s] or amount)") else {
    let pmt = assetInfo(i.payments[0].value().assetId.value()).value()
    if (pmt.issuer != this) then throw("Can use only ducklings from this dApp") else {
      strict call = invoke(Address(incubatorAddress), "startDuckHatching", [""], [])
      let kDucklingGrown = keyDucklingGrown(pmt.id.toBase58String())
      [
        BooleanEntry(kDucklingGrown, true),
        IntegerEntry(KGlobalIssuedTimestamp, lastBlock.timestamp)
      ]
    }
  }
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
